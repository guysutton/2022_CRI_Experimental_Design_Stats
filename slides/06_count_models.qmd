---
title: "05 - Count models"
author: "Guy F. Sutton"
institute: "Centre for Biological Control<br>Rhodes University, South Africa<Br>Email: g.sutton@ru.ac.za"
format: 
  revealjs:
    # incremental: true
    logo: images/cbc_logo_full.jpg
    # footer: "`emitanaka.org/slides/toronto2022`"
    slide-number: true
editor: source
execute:
  cache: true
---

## Gaussian data is rare 

```{r}
#| echo: false
#| eval: true

################
# Session setup 
################

# Use package manager to check, install and load required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  # List the packages you need below
  tidyverse,
  glmmTMB,
  DHARMa
)

# Change ggplot theme
theme_set(
  theme_classic() +
    theme(
      panel.border = element_rect(colour = "black",
                                  fill = NA),
      axis.text = element_text(colour = "black"),
      axis.title.x = element_text(margin = unit(c(2, 0, 0, 0),
                                                "mm")),
      axis.title.y = element_text(margin = unit(c(0, 4, 0, 0),
                                                "mm")),
      legend.position = "none"
    )
)
```


::: {.incremental}
::: {style="font-size: 0.75em"}
- All the analyses so far have assumed that we are dealing with normal (Gaussian) distributed data that can be measured as whole numbers with decimal places (e.g. height, weight, diameter).
  + However, most data in the real world either do not conform to the normal distribution, or they cannot be measured as numbers with decimal places, and can't be analysed with Gaussian models.
  + For example:
    + Counts (e.g. species abundances, days till an event) which are measured as integers (cannot take a decimal place), 
    + Binary data (e.g. dead/alive, 1/0, present/absent),
    + Proportion data (e.g. proportion survival, anything measured on a scale of [0,1])
  
- But, GLM's can easily be extended to fitting count models and proportion/binary data 
:::
:::

--- 

## Count data 

::: {.incremental}
::: {style="font-size: 0.85em"}
- Count data is ubiqutous in ecology.
  + e.g. No. of FCM per fruit
  + e.g. No. of ticks per zebra
  + e.g. Abundances of impala per hectare in the Kruger National Park

- Counts (or abundances) are defined as non-negative integers
  + I.e. They cannot take a decimal place
  + e.g. 0 FCM per fruit, 7 ticks on a zebra, 385 impala per hectare
  + NOT: 33.15 psyllids per leaf 
  + ALSO NOT: 27% of the flies dead
:::
:::

---

## Counts are not normal (literally)

::: {.incremental}
::: {style="font-size: 0.75em"}
- Counts typically do not conform to assumptions of normality for statistical tests
  + Count data typically follows a strong mean-variance relationship 
  + In many count datasets, there are many zeros and small counts, and successively fewer larger counts
:::
:::

. . . 

```{r}
#| echo: false
#| eval: true
#| fig-width: 10
#| fig-height: 4


# Simulate normal data across groups for visual comparison on next slides 
set.seed(2021)             
data_normal <- data.frame(Y = rnorm(n = 200, mean = 6, sd = 2),
                          citrus_var = rep(LETTERS[1:20], each = 10)) %>%
  dplyr::mutate(Y = round(Y, digits = 0))

# Simulate Poisson data across groups 
set.seed(2021)             
data <- data.frame(Y = rnbinom(n = 200, mu = 4, size = 5),
                   citrus_var = rep(LETTERS[1:20], each = 10))

# Show how counts usually have many zeroes and small numbers 
count_plot <- ggplot(data = data, aes(x = Y)) +
  geom_bar() +
  labs(x = "No. of FCM larvae",
       y = "Frequency",
       subtitle = "(b) What counts usually look like") +
  scale_x_continuous(breaks = seq(0, 15, 1),
                     limits = c(-1, 15))

# What would we expect if the data were normally distributed? 
normal_plot <- ggplot(data = data_normal, aes(x = Y)) +
  geom_bar() +
  labs(x = "No. of FCM larvae",
       y = "Frequency",
       subtitle = "(a) Expected under normal distribution") +
  scale_x_continuous(breaks = seq(0, 15, 1),
                     limits = c(-1, 15))

# Put the two plots together 
cowplot::plot_grid(normal_plot,
                   count_plot,
                   ncol = 2)
```
  
---   
  
## Count models 

::: {.incremental}
::: {style="font-size: 0.75em"}
- There are two basic options for modelling count data:
  1. [Poisson GLM]{style="color:#FF0000"} - The poisson distribution assumes the mean = variance.
  2. [Negative binomial GLM]{style="color:#0000FF"} - Expects more variance than the Poisson. Variance > mean. 
:::
:::

. . . 

```{r}
#| echo: false
#| eval: true
#| fig-width: 10
#| fig-height: 4

# Simulate negative binomial and Poisson data across groups 
set.seed(2021)             
data <- data.frame(Y_neg_bin = rnbinom(n = 200, mu = 4, size = 5),
                   Y_pois = rpois(n = 200, lambda = 4),
                   citrus_var = rnorm(n = 200, mean = 10)) %>%
  dplyr::arrange(citrus_var)

# Plot to visualise the differences 
poisson_plot <- ggplot() +
  geom_bar(data = data, aes(x = Y_pois),
            fill = "red") +
  scale_y_continuous(breaks = seq(0, 50, 10),
                     limits = c(0, 50)) + 
  scale_x_continuous(breaks = seq(0, 20, 4),
                     limits = c(0, 20)) + 
  labs(x = "No. of FCM larvae",
       y = "Frequency",
       subtitle = "(a) Poisson - mean = variance")

neg_bin_plot <- ggplot() +
  geom_bar(data = data, aes(x = Y_neg_bin),
            fill = "blue") +
  scale_y_continuous(breaks = seq(0, 50, 10),
                     limits = c(0, 50)) + 
  scale_x_continuous(breaks = seq(0, 20, 4),
                     limits = c(0, 20)) + 
  labs(x = "No. of FCM larvae",
       y = "Frequency",
       subtitle = "(b) Negative binomial - mean < variance")

# Put the two plots together 
cowplot::plot_grid(poisson_plot,
                   neg_bin_plot,
                   ncol = 2)
```
  
---

## Count models in `R` 

- Assuming our question is: *Does Y vary based on X?*

. . . 

- *Poisson GLM*:

`mod_poisson <- glm(Y ~ X, family = poisson(link = "log"), data = data)` 

. . . 

- *Negative binomial GLM*:

`mod_nb <- glmmTMB::glmmTMB(Y ~ X, family = nbinom2, data = data, REML = FALSE)`
  
--- 

## An example 

::: {.incremental}
::: {style="font-size: 0.75em"}
- I have simulated some data representing 100 FCM females who have been measured (`body_length`), and the number of eggs in their ovaries recorded (`no_eggs`). 
  + We want to know whether there is a relationship between `body_length` and `no_eggs`? 
  + I have simulated the data so that:
    + The expected `no_eggs` when `body_length` = 0 is 2.71 eggs. Obviously nonsense, but keep this value in mind for later. 
    + The `no_eggs` produced increases by a value of 2 (by a factor of 7)
:::
:::

```{r}
set.seed(2012)
#sample size
n <- 100
#regression coefficients
beta0 <- 1
beta1 <- 2
#generate covariate values
body_length <- runif(n=n, min=0, max=1.5)
#compute mu's
mu <- exp(beta0 + beta1 * body_length)
#generate Y-values
no_eggs <- rpois(n=n, lambda=mu)
#data set
data <- data.frame(body_length, no_eggs)
```

---

## Visualise relationship 

```{r}
#| echo: false
#| eval: true
#| fig-width: 8
#| fig-height: 4

data %>% 
  ggplot(data = ., aes(x = body_length, y = no_eggs)) +
  geom_point() +
  labs(
    x = "FCM body length (mm)",
    y = "No. of eggs"
  )
```

---

## Distribution of counts 

```{r}
#| echo: false
#| eval: true
#| fig-width: 8
#| fig-height: 4

data %>% 
  ggplot(aes(x = no_eggs)) +
  geom_bar() + 
  labs(
    x = "No. of eggs",
    y = "Frequency"
  ) +
  scale_y_continuous(breaks = seq(0, 10, 2)) +
  scale_x_continuous(breaks = seq(0, 70, 2))
```

---

## Fit gaussian GLM

::: {style="font-size: 0.85em"}
```{r}
#| echo: true
#| eval: true

mod_gaussian <- glm(
  no_eggs ~ body_length, 
  data = data, 
  family = gaussian(link = "identity"))
```
:::

---

## Any concerns? 

::: {style="font-size: 0.65em"}
```{r}
#| echo: true
#| eval: true

summary(mod_gaussian)
```
:::

. . . 

::: {.incremental}
::: {style="font-size: 0.65em"}
- What does the (Intercept) value tell us in a Gaussian GLM? 
  + The expected mean value when `x` = 0
  + So, in this example, the expected mean `no_eggs` when `body_length` = 0 is -5.12 eggs...
  + **Impossible - This model is clearly a bad fit to the data!!!**
:::
:::

---

## Model diagnostics 

::: {.incremental}
- Whenever you fit a model, you should always be evaluating how well the model fit the underlying data using *model diagnostics*. 
  + Diagnostics allow us to evaluate whether we captured the properties of the data adequately in our statistical model
  + If the diagnostics show a poor model fit, the inferences we draw are usually going to be misleading and wrong 
:::

--- 

## `DHARMa` 

::: {.incremental}
::: {style="font-size: 0.65em"}
- The easiest way to perform model diagnostics in `R` is using the `DHARMa` package, which uses a simulation-based approach to assess model fits. 
  + You may have performed tests such as `Shapiro-Wilk`, `Bartlett's`, or `Levene's`, in the past? 
  + These tests are typically performed incorrectly when used, and do not have the right properties to allow you to actually assess model fit, in many cases. 
  
- To use `DHARMa`, all we done is pass the variable name containing the fitted GLM model to the `simulateResiduals` function: 
:::
:::

. . . 

`DHARMa::simulateResiduals(fittedModel = model_name, plot = TRUE)` 

---

## `DHARMa` 

::: {style="font-size: 0.65em"}
- Let's assess the fit of our Gaussian GLM, it will give you two plots by default:
  + QQplot
  + Residual vs Predicted plot
:::

. . .
 
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 4

DHARMa::simulateResiduals(fittedModel = mod_gaussian, plot = T)
```

---

## Residuals 

::: {.incremental}
::: {style="font-size: 0.65em"}
- Residuals are the way we assess model fit:
  + In general, residuals are defined as the *difference between the actual y value and the predicted y value from the fitted statistical model*
    + In this example, the residual indicates the difference in the actual `no_eggs` versus the predicted `no_eggs` we derive from our Gaussian GLM.
:::
:::

. . . 

```{r}
#| echo: false
#| eval: true
#| fig-width: 10
#| fig-height: 4

df <- broom::augment(mod_gaussian)
ggplot(df, aes(x = .fitted, y = .std.resid)) + 
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed", colour = "red") + 
  labs(
    x = "Actual no. of eggs produced",
    y = "Residual \n (difference between actual and predicted no. of eggs)",
    subtitle = "Resiudals > 0 shows model underpredicting \nResiduals < 0 shows model overpredicting "
  ) +
  annotate("text", x = 0, y = 4, label = "Underpredicting", colour = "blue") + 
  annotate("text", x = 0, y = -2, label = "Overpredicting", colour = "red")
```

---

## QQplot 

::: {style="font-size: 0.65em"}
- The `QQplot` tells us how well the our model captured the underlying distribution of our data.
  + If the distribution we fit in our model (`family = gaussian`) is a good fit to the data, we will see the residuals lay *approximately* along the 1:1 dashed line.
:::

```{r}
#| echo: false
#| eval: true
#| fig-width: 8
#| fig-height: 4

resids <- DHARMa::simulateResiduals(fittedModel = mod_gaussian, plot = F)
DHARMa::plotQQunif(resids, plot = T)
```


---

## QQplot

```{r}
#| echo: false
#| eval: true
#| fig-width: 10
#| fig-height: 4
#| fig-align: center

resids <- DHARMa::simulateResiduals(fittedModel = mod_gaussian, plot = F)
DHARMa::plotQQunif(resids, plot = T)
```

::: {.incremental}
::: {style="font-size: 0.55em"}
- The `KS test` is a formal test of the fit,
    + If `KS p = ns` then the data in our model is not significantly different from the distribution specified (`family = gaussian`), 
    + If `KS p < 0.05` then the data in our model is **significantly different** from the distribution specified (`family = gaussian`), and we need to fit a different model
    + Not very helpful for count models though because the Gaussian distribution and Poisson distribution can often look the same in these plots
:::
:::

---

## Residual vs Fitted plot 

::: {.incremental}
::: {style="font-size: 0.55em"}
- The `Residual vs Fitted Plot` shows whether the relationship between our predictor variables and response variable is linear, and whether the variance is unequal in our data. 
  + Both evidence for a non-linear relationship and/or unequal variance would mean that the model we have fit is a poor choice for the data. 
  + Inspecting the plot below, we can see clear evidence for a non-linear relationship in the data (the lines are not horizontal), and unequal variance (the spread of the points for each x value is not equal). 
:::
:::

. . . 
```{r}
#| echo: false
#| eval: true
#| fig-width: 8
#| fig-height: 4
#| fig-align: center

resids <- DHARMa::simulateResiduals(fittedModel = mod_gaussian, plot = F)
DHARMa::plotResiduals(resids, plot = T)
```


---

## Fit Poisson GLM

::: {style="font-size: 0.60em"}
Recall the general syntax to fit a Poisson GLM: 

`mod_poisson <- glm(Y ~ X, family = poisson(link = "log"), data = data)` 
:::

. . . 

::: {style="font-size: 0.60em"}
```{r}
#| echo: true
#| eval: true

mod_poisson <- glm(no_eggs ~ body_length, 
                   data = data, 
                   family = poisson(link = "log"))
summary(mod_poisson)
```
:::

---

## Was this model a better fit? 

::: {style="font-size: 0.60em"}
- The Poisson GLM was a good fit. 
  + The `QQplot` shows that our data are not significantly different from what would be expected under the Poisson distribution. 
  + The `Residual vs Fitted Plot` clearly indicates that the Poisson GLM was able to capture the non-linear relationship between `no_eggs` and `body_length` adequately, and that it was able to capture the varation appropriately. 
:::

. . . 

```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 3.5
#| fig-align: center
#| 
DHARMa::simulateResiduals(fittedModel = mod_poisson, plot = T)
```

---

## Interpreting the model output 

::: {.incremental}
::: {style="font-size: 0.70em"}
- When working with the Poisson (and other count models, e.g. negative binomial), the interpretation of the model output is different to the Gaussian GLM. 
  + The reason being is that the Poisson model is modelling the response variable on the log scale, not the raw data scale. 
  + So, to interpret results from count models on the scale of the response variable (e.g. `no_eggs`), we need to exponentiate the results, using the `exp` function. 
:::
:::

---

## Exponentiating the (Intercept)

::: {style="font-size: 0.60em"}
```{r}
#| echo: true
#| eval: true
#| 
summary(mod_poisson)
```
:::

. . . 

::: {style="font-size: 0.60em"}
- The `Intercept` value is 0.93. 
    + For the Gaussian GLM, we would say interpret this value as the mean `no_eggs` when `body_length` = 0 is equal 0.93 eggs. 
    + For the Poisson GLM, we need to take `exp(0.93)` to transform this value into the `no_eggs` `body_length` = 0.
     + The expected mean `no_eggs` when `body_length` = 0 is 2.53 eggs
:::

. . . 

```{r}
exp(coef(mod_poisson)[1])
```

---

## Exponentiating the beta coefficient 

::: {style="font-size: 0.60em"}
```{r}
#| echo: true
#| eval: true

summary(mod_poisson)
```
:::

. . . 

::: {.incremental}
::: {style="font-size: 0.60em"}
- The $\beta$~1~ (the coefficient for the effect of `body_length`) value is 2.04. 
    + For the Gaussian GLM, we would say interpret this value as the increase in the `no_eggs` for a 1 unit increase in `body_length` is equal to 2.04 more eggs. 
    + For the Poisson GLM, we need to take `exp(2.04)` to transform this value to get the **factor** increase in the `no_eggs` for a 1 unit increase in `body_length` .
     + The factor increase in the `no_eggs` for every 1 unit increase in `body_length` is 7.69x more eggs
:::
:::

. . . 

```{r}
#| echo: true
#| eval: true

exp(coef(mod_poisson)[2])
```

---

## Compare Gaussian vs Poisson GLM 

::: {style="font-size: 0.60em"}
- This plot should hopefully show that fitting a Gaussian GLM to count data is usually going to produce nonsense results, and the predictions from these models will typically be very wrong and basically unusable
:::

```{r}
#| echo: false
#| eval: true
#| fig-width: 10
#| fig-height: 4
#| fig-align: center

preds <-
  ggeffects::ggpredict(
    mod_gaussian,
    terms = c("body_length"),
    type = "fe",
    interval = "confidence"
    # interval = "prediction"
  ) %>%
  as.data.frame() %>%
  dplyr::rename(body_length = x)

preds_gaussian <- preds %>%
  ggplot(data = ., aes(x = body_length, y = predicted)) +
  geom_line() +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high),
              alpha = 0.2) +
  geom_point(data = data, aes(x = body_length, y = no_eggs)) +
  labs(
    x = "FCM body length (mm)",
    y = "Predicted no. of eggs",
    subtitle = "(a) Gaussian GLM"
  )
```


```{r}
#| echo: false
#| eval: true

preds <-
  ggeffects::ggpredict(
    mod_poisson,
    terms = c("body_length"),
    type = "fe",
    interval = "confidence"
    # interval = "prediction"
  ) %>%
  as.data.frame() %>%
  dplyr::rename(body_length = x)

preds_poisson <- preds %>%
  ggplot(data = ., aes(x = body_length, y = predicted)) +
  geom_line() +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high),
              alpha = 0.2) +
  geom_point(data = data, aes(x = body_length, y = no_eggs)) +
  labs(
    x = "FCM body length (mm)",
    y = "Predicted no. of eggs",
    subtitle = "(b) Poisson GLM"
  )

```

```{r}
#| echo: false
#| eval: true

(plots <- cowplot::plot_grid(preds_gaussian, preds_poisson, nrow = 1))
```

---

## Hypothesis testing 

- Finally, performing hypothesis testing for Poisson GLM's is exactly the same as for the Gaussian GLM
  + Fit a null model (a model without the predictor variable of interest)

```{r}
#| echo: true
#| eval: true

mod_null <- glm(no_eggs ~ 1, data = data, family = poisson(link = "log"))
```

---

## Likelihood Ratio Test 

- We then perform a Likelihood Ratio Test 

```{r}
#| echo: true
#| eval: true

anova(mod_null, mod_poisson, test = "Chisq")
```

::: {.incremental}
::: {style="font-size: 0.70em"}
- There is a statistically significant relationship between FCM `body_length` and the `no_eggs` produced (X2 = 1089.1, df = 1, *P* < 0.001).
  + We know that one of the models was better than the other because the *P* < 0.05.
  + We then can tell that model 2 (`mod_poisson`) is the better model because it has a **lower** residual deviance (`Resid. Dev = 75.9`) than model 1 (`mod_null`) (`Resid. Dev = 1165.0`). 
:::
:::

---  

## Write-up results 

There is a statistically significant relationship between FCM `body_length` and the `no_eggs` produced (X2 = 1089.1, df = 1, *P* < 0.001). For every 1 unit increase in FCM body length, the number of eggs produced per female, on average, increases by a factor of 7.69 ($\beta$~1~ = 2.04) (Figure 1). 

```{r}
#| echo: false
#| eval: true
#| fig-width: 8
#| fig-height: 4

preds_poisson
```

---

## Negative binomial distribution 

::: {style="font-size: 0.70em"}
- Another distribution that can be used for modelling count data is the *negative binomial (NB)* distribution. 
  + As we saw earlier in this slide deck, the difference between the Poisson and NB distribution is the assumptions of the mean = variance vs mean < variance. 
  + In non-statistical terms, the NB data typically has a greater spread of data (spread across the x-axis) than the Poisson
:::

```{r}
#| echo: false
#| eval: true
#| fig-width: 10
#| fig-height: 4
#| fig-align: center

# Simulate negative binomial and Poisson data across groups 
set.seed(2021)             
data <- data.frame(Y_neg_bin = rnbinom(n = 200, mu = 4, size = 5),
                   Y_pois = rpois(n = 200, lambda = 4),
                   citrus_var = rnorm(n = 200, mean = 10)) %>%
  dplyr::arrange(citrus_var)

# Plot to visualise the differences 
poisson_plot <- ggplot() +
  geom_bar(data = data, aes(x = Y_pois),
            fill = "red") +
  scale_y_continuous(breaks = seq(0, 50, 10),
                     limits = c(0, 50)) + 
  scale_x_continuous(breaks = seq(0, 20, 4),
                     limits = c(0, 20)) + 
  labs(x = "No. of FCM larvae",
       y = "Frequency",
       subtitle = "(a) Poisson - mean = variance")

neg_bin_plot <- ggplot() +
  geom_bar(data = data, aes(x = Y_neg_bin),
            fill = "blue") +
  scale_y_continuous(breaks = seq(0, 50, 10),
                     limits = c(0, 50)) + 
  scale_x_continuous(breaks = seq(0, 20, 4),
                     limits = c(0, 20)) + 
  labs(x = "No. of FCM larvae",
       y = "Frequency",
       subtitle = "(b) Negative binomial - mean < variance")

# Put the two plots together 
cowplot::plot_grid(poisson_plot,
                   neg_bin_plot,
                   ncol = 2)
```

---

## Fit NB GLM

- Whenever you model count data, I would recommend to fit both a Poisson and NB model, and compare the results and model fits. 

. . . 

Recall the general syntax to fit a NB GLM: 

`mod_nb <- glmmTMB::glmmTMB(Y ~ X, family = nbinom2, data = data)` 

---

## Fit NB model 

::: {style="font-size: 0.70em"}
- The interpretation, model diagnostics, and inference as exactly the same as for the Poisson GLM. 
  + So, we won't repeat all of that code, you can do that in your own time. 
:::

::: {style="font-size: 0.70em"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 4
#| fig-align: center

mod_nb <- glmmTMB::glmmTMB(no_eggs ~ body_length, data = data, family = nbinom2)
summary(mod_nb)
```
::: 

---

## Compare Poisson vs NB GLM

::: {style="font-size: 0.70em"}
- As per usual, we use the LRT
  + Strange result, right? 
  + We can't compare the poisson GLM fit with the `glm` function vs the NB model fit with the `glmmTMB` function
:::

```{r}
#| echo: true
#| eval: true

anova(mod_poisson, mod_nb, test = "Chisq")
```

---

## Refit Poisson using `glmmTMB` 

::: {style="font-size: 0.70em"}
- We have to refit the Poisson GLM using `glmmTMB` 
:::

::: {style="font-size: 0.70em"}
```{r}
#| echo: true
#| eval: true

mod_poisson_glmmTMB <- glmmTMB::glmmTMB(no_eggs ~ body_length, data = data, family = poisson(link = "log"))
```
:::

. . . 

::: {style="font-size: 0.70em"}
```{r}
#| echo: true
#| eval: true

anova(mod_poisson_glmmTMB, mod_nb, test = "Chisq")
```
:::

. . . 

::: {.incremental}
::: {style="font-size: 0.70em"}
- Now we can compare the Poisson vs NB model using LRT
  + There is no evidence for a significant improvement in model fit when fitting the NB model versus the Poisson model (X2 = 0.50, df = 1, P = 0.477).
  + In this case, you use the simpler Poisson model 
::: 
:::

---

## Counts model with a categorical predictor 

::: {.incremental}
::: {style="font-size: 0.70em"}
- So far, we have been fitting models where the predictor variable (`body_length`) is numeric/continuous. 
- But, we can easily fit counts models with a categorical/factor variable.
  + E.g. If we take 40 malaise samples from each of 3 different farms (`farm`) (n = 120 total samples) and compare insect species richness (`sp_rich`)
:::
:::

. . . 

::: {style="font-size: 0.70em"}
```{r}
#| echo: false
#| eval: true

#sample size
n <- 120
#regression coefficients
beta0 <- 1
beta1 <- 2
#generate covariate values
body_length <- runif(n=n, min=0, max=1.5)
#compute mu's
mu <- exp(beta0 + beta1 * body_length)
#generate factor variable 
farm <- rep(letters[1:3], each = 40)
#generate Y-values
no_insect <- rpois(n=n, lambda=mu)
#data set
data <- data.frame(farm, sp_rich=no_insect) %>%
  dplyr::mutate(farm = paste("farm",farm, sep = "_")) %>%
  dplyr::mutate(sp_rich = dplyr::if_else(farm == "farm_a", as.numeric(sp_rich + 20), as.numeric(sp_rich)))
```

```{r}
#| echo: false
#| eval: true
#| fig-width: 6 
#| fig-height: 3
#| fig-align: center

data %>% 
  ggplot(aes(x = farm, y = sp_rich)) +
  geom_boxplot() +
  labs(
    x = "Farm",
    y = "Species richness"
  )
```
:::

---

## Fit Poisson with categorical predictor 

- The syntax to fit the model, diagnostics and hypothesis testing is the same as for fitting the model with a numeric predictor. 

```{r}
#| echo: true
#| eval: true

mod_poisson <- glm(sp_rich ~ farm, 
                    data = data, 
                    family = poisson(link = "log"))
```


---

## Interpretation is different

::: {style="font-size: 0.60em"}
- Interpreting the model summary is a bit different. 
  + Notice, how `farm_a` is missing? 
  + `R` is comparing `farm_b` and `farm_c` to `farm_a`, which is being treated as the reference level.
  + Not ideal... 

```{r}
#| echo: false
#| eval: true

summary(mod_poisson)
```
:::

--- 

## Multiple comparisons 

::: {.incremental}
- What is the solution? 
  + Multiple comparisons, which compares each level to each other, not just to a reference level like `summary`.
  + After hypothesis testing, it allows us to tell which levels within a significant factor are different from one another. 
:::

---

## Perform multiple comparisons 

::: {style="font-size: 0.60em"}
- We already know that there were significant differences in insect species richness between farms, but we don't know which farms were different from one another
:::

. . . 

::: {style="font-size: 0.60em"}
```{r}
#| echo: true
#| eval: true

emmeans::emmeans(mod_poisson, 
                 specs = pairwise ~ farm,
                 )$contrasts
```
:::

. . . 

::: {.incremental}
::: {style="font-size: 0.60em"}
- The `estimate` column gives the $\beta$ co-efficient for each comparison, on the log scale. 
    + It gives the factor increase going from the first level to the second level, once we exponentiate the value 
      + e.g. The `estimate` for the `farm_a - farm_b` comparison is 0.913 (positive) and statistically significant (*P* < 0.001), which tells us that insect richness is higher at `farm_a` than `farm_b`.
      + Taking `exp(0.913)` gives us a value of 2.49.
      +  So, insect species richness is 2.49 times higher at `farm_a` than `farm_b`.
:::
:::

---

## Test yourself 

::: {.panel-tabset}

### Background 

::: {style="font-size: 0.60em"}
- Given the dataset in the `Data` tab, consisting of 200 agar plates grown with 5 different growth media (40 plates per growth medium) (`growth_medium`) and the no. of fungal colonies counted per plate (`no_colonies`):
  + Should we be growing our fungal cultures on one  particular growth medium, or is the no. of fungal colonies produced similar across all the growth media? 
  + If we should be using a particular growth medium, which medium should we use? 
:::


```{r}
#| echo: false
#| eval: true

# Use package manager to check, install and load required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  # List the packages you need below
  tidyverse,
  glmmTMB,
  DHARMa
)

# Set seed
set.seed(2021)

# Set sample size
n <- 200

# Specify regression coefficients
beta0 <- 1     # B0
beta1 <- 3     # B1

# Generate covariate values
body_length <- runif(n=n, min=0, max=1.5)

# Compute mu's
mu <- exp(beta0 + beta1 * body_length)

# X factor variable 
growth_medium <- rep(letters[1:5], each = 40)

# Generate Y-values
no_colonies <- rpois(n=n, lambda=mu)

# Data set
data <- data.frame(growth_medium, body_mass = body_length, no_colonies) %>%
  dplyr::mutate(growth_medium = paste("medium",growth_medium, sep = "_"))
```

```{r}
#| echo: false
#| eval: true
#| fig-width: 6 
#| fig-height: 3
#| fig-align: center

data %>% 
  ggplot(aes(x = growth_medium, y = no_colonies)) +
  geom_point() +
  labs(
    x = "Growth medium",
    y = "No. of colonies"
  )
```

### Data 

```{r}
#| echo: true
#| eval: true

# Use package manager to check, install and load required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  # List the packages you need below
  tidyverse,
  glmmTMB,
  DHARMa
)

# Set seed
set.seed(2021)

# Set sample size
n <- 200

# Specify regression coefficients
beta0 <- 1     # B0
beta1 <- 3     # B1

# Generate covariate values
body_length <- runif(n=n, min=0, max=1.5)

# Compute mu's
mu <- exp(beta0 + beta1 * body_length)

# X factor variable 
growth_medium <- rep(letters[1:5], each = 40)

# Generate Y-values
no_colonies <- rpois(n=n, lambda=mu)

# Data set
data <- data.frame(growth_medium, body_mass = body_length, no_colonies) %>%
  dplyr::mutate(growth_medium = paste("medium",growth_medium, sep = "_"))
```

:::

---

### Plot the no. of colonies by growth medium

::: {.panel-tabset}

### Plot 

```{r}
#| echo: false
#| eval: true
#| fig-width: 8 
#| fig-height: 4

data %>% 
  ggplot(aes(x = growth_medium, y = no_colonies)) +
  geom_point() +
  labs(
    x = "Growth medium",
    y = "No. of colonies"
  )
```

### Code

```{r}
#| echo: true
#| eval: false
#| fig-width: 8 
#| fig-height: 4

data %>% 
  ggplot(aes(x = growth_medium, y = no_colonies)) +
  geom_point() +
  labs(
    x = "Growth medium",
    y = "No. of colonies"
  )
```

:::

---

### Plot the distribution of colony counts by growth medium

::: {.panel-tabset}

### Plot 

```{r}
#| echo: false
#| eval: true
#| fig-width: 10 
#| fig-height: 5
#| fig-align: center

data %>% 
  ggplot(aes(x = no_colonies)) +
  geom_bar() + 
  labs(
    x = "No. of colonies",
    y = "Frequency"
  ) +
  facet_wrap(~growth_medium, nrow = 2)
```


### Code 

```{r}
#| echo: true
#| eval: false
#| fig-width: 10
#| fig-height: 5
#| fig-align: center

data %>% 
  ggplot(aes(x = no_colonies)) +
  geom_bar() + 
  labs(
    x = "No. of colonies",
    y = "Frequency"
  ) +
  facet_wrap(~ growth_medium, nrow = 2)
```

:::

---

## Fit Gaussian GLM, not 100% necessary 

::: {style="font-size: 0.70em"}
```{r}
#| echo: true
#| eval: true

mod_gaussian <- glm(no_colonies ~ growth_medium, data = data, family = gaussian(link = "identity"))
```
:::

::: {.panel-tabset}

### Diagnostics plot

```{r}
#| echo: false
#| eval: true

mod_gaussian <- glm(no_colonies ~ growth_medium, 
                    data = data, 
                    family = gaussian(link = "identity"))
DHARMa::simulateResiduals(fittedModel = mod_gaussian, plot = T)
```

### Code 

```{r}
#| echo: true
#| eval: false

mod_gaussian <- glm(no_colonies ~ growth_medium, 
                    data = data, 
                    family = gaussian(link = "identity"))
DHARMa::simulateResiduals(fittedModel = mod_gaussian, plot = T)
```

:::

---

## Fit Poisson GLM

::: {style="font-size: 0.70em"}
```{r}
#| echo: true
#| eval: true

mod_poisson <- glm(no_colonies ~ growth_medium, data = data, family = poisson(link = "log"))
```
:::

::: {.panel-tabset}

### Diagnostics plot

```{r}
#| echo: false
#| eval: true

mod_poisson <- glm(no_colonies ~ growth_medium, 
                   data = data, 
                   family = poisson(link = "log"))
DHARMa::simulateResiduals(fittedModel = mod_poisson, plot = T)
```

### Code 

```{r}
#| echo: true
#| eval: false

mod_poisson <- glm(no_colonies ~ growth_medium, 
                   data = data, 
                   family = poisson(link = "log"))
DHARMa::simulateResiduals(fittedModel = mod_poisson, plot = T)
```

:::

---

## Fit Negative Binomial GLM

::: {style="font-size: 0.70em"}
```{r}
#| echo: true
#| eval: true

mod_nb <- glmmTMB::glmmTMB(no_colonies ~ growth_medium, data = data, family = nbinom2)
```
:::

::: {.panel-tabset}

### Diagnostics plot

```{r}
#| echo: false
#| eval: true

mod_nb <- glmmTMB::glmmTMB(no_colonies ~ growth_medium, 
                           data = data, 
                           family = nbinom2)
DHARMa::simulateResiduals(fittedModel = mod_nb, plot = T)
```

### Code 

```{r}
#| echo: true
#| eval: false

mod_nb <- glmmTMB::glmmTMB(no_colonies ~ growth_medium, 
                           data = data, 
                           family = nbinom2)
DHARMa::simulateResiduals(fittedModel = mod_nb, plot = T)
```

:::

---

## Hypothesis test for `growth_medium` effect 

::: {.panel-tabset}

### Result

```{r}
#| echo: false
#| eval: true

mod_null <- glmmTMB::glmmTMB(no_colonies ~ 1, data = data, family = nbinom2)
anova(mod_null, mod_nb, test = "Chisq")
```

### Code 

```{r}
#| echo: true
#| eval: false

mod_null <- glmmTMB::glmmTMB(no_colonies ~ 1, data = data, family = nbinom2)
anova(mod_null, mod_nb, test = "Chisq")
```

:::

---

## Multiple comparisons 

::: {.panel-tabset}

### Result

```{r}
#| echo: false
#| eval: true

emmeans::emmeans(mod_nb, specs = pairwise ~ growth_medium)$contrasts
```

### Code 

```{r}
#| echo: true
#| eval: false

emmeans::emmeans(mod_nb, specs = pairwise ~ growth_medium)$contrasts
```

:::

---

## Plot model predictions 

::: {.panel-tabset}

### Result

```{r}
#| echo: false
#| eval: true

# Extract predictions 
preds <-
  ggeffects::ggpredict(
    mod_nb,
    terms = c("growth_medium"),
    type = "fe",
    interval = "confidence"
    # interval = "prediction"
  ) %>%
  as.data.frame() %>%
  dplyr::rename(growth_medium = x)

# Make plot 
preds %>%
  ggplot(data = ., aes(x = growth_medium, y = predicted)) +
  geom_point() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
              alpha = 1) +
  geom_point(data = data, 
             aes(x = growth_medium, y = no_colonies), 
             alpha = 0.2) +
  labs(
    x = "Growth medium",
    y = "Predicted no. of colonies"
  )
  
```

### Result

```{r}
#| echo: true
#| eval: false

# Extract predictions 
preds <-
  ggeffects::ggpredict(
    mod_nb,
    terms = c("growth_medium"),
    type = "fe",
    interval = "confidence"
    # interval = "prediction"
  ) %>%
  as.data.frame() %>%
  dplyr::rename(growth_medium = x)

# Make plot 
preds %>%
  ggplot(data = ., aes(x = growth_medium, y = predicted)) +
  geom_point() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
              alpha = 1) +
  geom_point(data = data, 
             aes(x = growth_medium, y = no_colonies), 
             alpha = 0.2) +
  labs(
    x = "Growth medium",
    y = "Predicted no. of colonies"
  )
  
```

:::